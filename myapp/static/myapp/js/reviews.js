// myapp/static/myapp/js/reviews.js

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const reviewTextarea = document.getElementById('review-text');
const submitBtn = document.getElementById('submit-review');
const errorElement = document.getElementById('review-error');
const charCount = document.getElementById('char-count');
const reviewsList = document.getElementById('reviews-list');

// –°—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤
reviewTextarea.addEventListener('input', function() {
    charCount.textContent = this.value.length;
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞
submitBtn.addEventListener('click', submitReview);

function submitReview() {
    const reviewText = reviewTextarea.value.trim();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!reviewText) {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞');
        return;
    }
    
    if (reviewText.length < 10) {
        showError('–û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)');
        return;
    }
    
    hideError();
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<span class="btn-icon">‚è≥</span> –û—Ç–ø—Ä–∞–≤–∫–∞...';
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    fetch(reviewsUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': csrfToken
        },
        body: JSON.stringify({
            review_text: reviewText
        })
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(data => {
                throw new Error(data.errors || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞');
            });
        }
        return response.json();
    })
    .then(data => {
        addReviewToList(data);
        reviewTextarea.value = '';
        charCount.textContent = '0';
        showSuccess();
    })
    .catch(error => {
        showError(error.message);
    })
    .finally(() => {
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        submitBtn.disabled = false;
        submitBtn.innerHTML = '<span class="btn-icon">üì§</span> –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤';
    });
}

function addReviewToList(review) {
    const noReviews = reviewsList.querySelector('.no-reviews');
    
    if (noReviews) {
        noReviews.remove();
    }
    
    const sentimentClass = review.sentiment ? 'positive' : 'negative';
    const sentimentText = review.sentiment ? 'üòä –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π' : 'üòû –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π';
    const sentimentBadgeClass = review.sentiment ? 'positive-badge' : 'negative-badge';
    
    const reviewCard = document.createElement('div');
    reviewCard.className = `review-card ${sentimentClass}`;
    reviewCard.dataset.reviewId = review.id;
    reviewCard.style.opacity = '0';
    reviewCard.style.transform = 'translateY(-20px)';
    
    const canDelete = review.username === currentUsername;
    const deleteButton = canDelete ? 
        `<button class="delete-btn" data-review-id="${review.id}">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>` : '';
    
    reviewCard.innerHTML = `
        <div class="review-header">
            <div class="review-author-block">
                <span class="review-author">üë§ ${escapeHtml(review.username)}</span>
                <span class="review-date">üìÖ ${formatDate(review.created_at)}</span>
            </div>
            <span class="review-sentiment">
                <span class="sentiment-badge ${sentimentBadgeClass}">${sentimentText}</span>
            </span>
        </div>
        <div class="review-text">${escapeHtml(review.text)}</div>
        ${deleteButton}
    `;
    
    reviewsList.insertBefore(reviewCard, reviewsList.firstChild);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        reviewCard.style.transition = 'all 0.3s ease';
        reviewCard.style.opacity = '1';
        reviewCard.style.transform = 'translateY(0)';
    }, 10);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è
    if (canDelete) {
        const deleteBtn = reviewCard.querySelector('.delete-btn');
        deleteBtn.addEventListener('click', function() {
            deleteReview(review.id);
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
document.querySelectorAll('.delete-btn').forEach(btn => {
    btn.addEventListener('click', function() {
        const reviewId = this.dataset.reviewId;
        deleteReview(reviewId);
    });
});

function deleteReview(reviewId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤?')) {
        return;
    }
    
    fetch(deleteUrl + reviewId + '/', {
        method: 'DELETE',
        headers: {
            'X-CSRFToken': csrfToken
        }
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(data => {
                throw new Error(data.errors || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞');
            });
        }
        return response.json();
    })
    .then(() => {
        const reviewCard = document.querySelector(`[data-review-id="${reviewId}"]`);
        if (reviewCard) {
            reviewCard.style.opacity = '0';
            reviewCard.style.transform = 'scale(0.8)';
            setTimeout(() => {
                reviewCard.remove();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –æ—Ç–∑—ã–≤—ã
                const remainingReviews = reviewsList.querySelectorAll('.review-card');
                if (remainingReviews.length === 0) {
                    reviewsList.innerHTML = `
                        <div class="no-reviews">
                            <div class="no-reviews-icon">üé¨</div>
                            <p>–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!</p>
                        </div>
                    `;
                }
            }, 300);
        }
    })
    .catch(error => {
        alert(error.message);
    });
}

function showError(message) {
    errorElement.textContent = message;
    errorElement.classList.add('visible');
    reviewTextarea.style.borderColor = '#e74c3c';
}

function hideError() {
    errorElement.classList.remove('visible');
    reviewTextarea.style.borderColor = '#e0e0e0';
}

function showSuccess() {
    const originalHTML = submitBtn.innerHTML;
    submitBtn.innerHTML = '<span class="btn-icon">‚úÖ</span> –û—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω!';
    submitBtn.style.background = 'linear-gradient(135deg, #27ae60 0%, #229954 100%)';
    
    setTimeout(() => {
        submitBtn.innerHTML = originalHTML;
        submitBtn.style.background = '';
    }, 2000);
}

function formatDate(dateString) {
    const date = new Date(dateString);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    
    return `${day}.${month}.${year} ${hours}:${minutes}`;
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (Ctrl+Enter)
reviewTextarea.addEventListener('keydown', function(e) {
    if (e.ctrlKey && e.key === 'Enter') {
        submitReview();
    }
});
